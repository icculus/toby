Toby CHANGELOG.


Please note that only the most significant changes are noted here. Also,
things that aren't visually interesting usually aren't mentioned. For
example, the fact that the keyword tables are now autosorted doesn't get
noted, but the fact that there's now a splash screen is noted. This is
meant to be informative, but not authoritative.


If you want a byte-for-byte revision history, please use the CVS server:
    [hhmm...which is not currently available, since XNOT's demise. The
     repository is intact, and will be made public again sooner or later.]

What's new in Toby alpha6:
- Added (multidimensional) arrays, a String intrinsic type, and functions for
  string manipulation to the interpreter and Toby language.
- Added French translation by Olivier Scalbert. Thanks!
- Rewrote TurtleSpace...AGAIN. TurtleSpace is now a class (not an interface)
  which does all the high-level stuff. It talks to a TurtleSpaceRenderer
  interface, which does the low-level stuff, like getting bits to the screen.
  the high-level code (turtle management, etc) was moved out of JTurtleSpace
  and into TurtleSpace. The rest of JTurtleSpace became SwingRenderer.
  Turtle.java had all the painting and calculation stuff moved out of it and
  into SwingRenderer. Turtle.java is now just a container of info for a given
  turtle (angle, size, position, etc.), and is in the main turtlespace
  package. TriangleTurtle mostly made it's way into SwingRenderer for now, and
  will eventually move into TurtleSpace. Turtles, I guess, will always be
  triangles. Abstractness has limits.  :)
- Added (for my amusement as much as a test of the new TurtleSpace) an
  SDL-based native code implementation of TurtleSpaceRenderer. It crashes
  sooner than later, and everything but line-drawing is a no-op, but it runs!
  This is not to be tried by the weak, but the C and java code is in there.
- This will be the last Java release by me. The next revision will be a C++
  rewrite. The Java code will be kept around, and enhancements and fixes will
  still be accepted, but I will be focusing on the C++ version after alpha6.

What's new in Toby alpha5:
- Fixes, improvements, and revisions, oh my!
- Added a thanks.txt file to the docs.
- Added some basic batch file/scripts for running Toby.
- The parser and interpreter have been COMPLETELY rewritten. The new system
  has been termed the TUD engine (for Toby Universal Domination), and it's
  much, MUCH, faster than the alpha4 interpreter for several reasons.
  At the same time, it's also much more flexible, which means sooner or later
  more languages will get plugged into this project. An honest-to-God LOGO
  implementation comes to mind, but other things like scientific modelling
  languages and such should not be ruled out, either.
- TurtleSpace has become an interface, which is implemented by a
  JComponent-based widget. This abstraction will, eventually, allow us to
  create a Spotlet (Java UI on the Palm Pilot) version of Toby.
- A lot of handy code was moved from TobyProcedure.java (most of what wasn't
  moved out of this class was eventually rewritten) to SaneTokenizer.java.
  Anything that could be considered abstract was moved out of TobyTokenizer
  and placed in SaneTokenizer, too. Now TobyTokenizer.java does just what is
  absolutely specific to the Toby language.
- The program has been separated into packages under the last.toby.* tree.
- Lots of things that had wide use, like TobyParseException, have been made
  more abstract (in this case, renamed to "ParseException").
- The interpreter is no longer a subclass of TurtleSpace. They are completely
  separate entities, which makes better sense in the long run.
- TobyLanguage no longer uses printf()-style format tags, like "%s," "%d,"
  etc, since this prevents true language abstraction. Now tags are simply
  "%1," "%2," etc., so they may be in any order in the text and still
  recieve correct replacement, and we can change the output of "12" to "twelve"
  in the source base and not have to change the local strings. Furthermore,
  the English text is the default hardcoded language, but this may be
  overridden at runtime by a toby.lang file, so new languages may be added
  without a recompile or modification of the source code.
- Toby.java is now just an entry to the code. The original Toby.java has
  become last.toby.gui.TobyFrame ...
- Fixes to the Swing code.
- SaneTokenizer now handles pushBack() better.
- Much, much more.

...basically, this was a almost complete rewrite; every subsystem was looked
at, and reevaluated. There is still more to be done.


What's new in Toby alpha4:
- Lots of bug fixes and code improvements.
- Required Java version is now 1.2, Java 1.1 w/ Swing will not be
  sufficient for much longer, I think.
- Toby now understands the "==" operator, which works like the Java
   "==" operator...equivalence checking.
- Splash screen code is written and incorporated. Need a better graphic.
- An angle of zero degrees in TurtleSpace used to be due north. This was
  because LOGO treated angles this way. This has been changed to follow
  geometric convention; zero degrees is now due east.
- All literal strings have been moved to TobyLanguage.java ...Code has
  been added to make dynamic language support a reality. Soon, there will
  be translations to other languages, and in the next alpha, you won't
  even need a recompile (or restart) to switch languages.
- On file open, if the file doesn't exist, we try to open filename.toby,
  just in case. On save, if .toby extension isn't specified, we add it.
- Checks for various incompatibilities in virtual machines/class library
  implementations have been moved to Incompatibilities.java.
- ...and much, much more.


What's new in Toby alpha3:
- Lots of stuff; this is the first public release, and I wasn't keeping a
  changelog before this.  :)

--ryan. (icculus@lokigames.com)



