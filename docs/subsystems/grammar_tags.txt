Grammar XML tags.

-------------------------------------------------------------------------------
tagname     : <language>
parent      : [must be top level]
children    : <tokenizer>, <element>
description : Head node. Must come first, and only once.
attributes  :
    name="string"
        Programming language name. Default is undefined.
    firstelement="string"
        Element with (name) attribute that matches (string). This element will
        be the start of the lexing rules. The specified element must be in
        the global element namespace (must be an immediate child of this
        language tag. Default is undefined.

-------------------------------------------------------------------------------
tagname     : <tokenizer>
parent      : <language>
children    : [no children allowed]
description : Configures tokenizer. This is only permitted once, and must be
              a child of the <language> tag. This may change in the future if
              more flexibility is needed.
attributes  :
    casesensitive="[true|false]"
        Whether word tokens must match the case specified in a <reqword>'s
        (text) attribute. <reqword>'s (casesensitive) attribute overrides this
        on a per-tag basis, but this attribute sets the global default.
        Default is true.
    whitespacechars="string"
        The characters in (string) will be considered whitespace. Usual C
        character escaping rules apply: "\t" is ASCII 9, '\r' is ASCII 13,
        and '\n' is ASCII 10. Default is " \t" (that's ASCII 32, ASCII 9).
    ignorewhitespace="[true|false]"
        If true, blocks of whitespace are skipped by the tokenizer. This means
        that the <reqwhitespace> tag will always fail, but it also means that
        you don't have to check for it. Default is true.
    ignorenewlines="[true|false]"
        If true, blocks of whitespace are skipped by the tokenizer. This means
        that the <reqnewline> tag will always fail, but it also means that
        you don't have to check for it. Default is true.
    singlelinecommentstart="string"
        (string) signifies the sequence of characters that comprise a
        single line comment. If you were tokenizing C++, it would be "//".
    ignoresinglelinecomments="[true|false]"
        If true, single line comments are skipped by the tokenizer. This means
        that the <reqsinglelinecomment> tag will always fail, but it also
        means that you don't have to check for it. The next token after a
        single line comment is always a newline, unless you are also ignoring
        those. Default is true.
    multilinecommentstart="string"
        (string) signifies the sequence of characters that comprise the start
        of a multiline comment. If you were tokenizing C++, it would be "/*".
    multilinecommentend="string"
        (string) signifies the sequence of characters that comprise the end
        of a multiline comment. If you were tokenizing C++, it would be "*/".
    ignoremultilinecomments="[true|false]"
        If true, multiline comments are skipped by the tokenizer. This means
        that the <reqmultilinecomment> tag will always fail, but it also
        means that you don't have to check for it. Default is true.
    quotechars="string"
        (string) signifies a list of characters that can define a literal
        string. In C++, this would be "\"" (or, alternately, '"'). In Perl, it
        would be "\"\'". Default is "\"\'".
    escaping="[true|false]"
        If true, then the value of the escapeChar attribute will be used to
        escape quote chars. Default is true.
    escapeChar="char"
        (char) signifies the character used to escape strings. So if you have
        "my string \"", and escaping is true, and escapeChar is '\\', then
        there wouldn't be a tokenizing problem here. Default is '\\'.
    convertnumstowords="[true|false]"
        If true, then <reqnumber> will always fail, since numerics are
        reported as word tokens. This tends to simplify lexing/parsing of some
        languages, and complicate others. Default is false.

-------------------------------------------------------------------------------
tagname    : <element>
parent     : <language>, <element>
children   : <element>, <repeat>, <optional>, <pickone>, <reqelement>,
             <reqword>, <reqnewline>, <reqnumber>, <reqliteralstring>,
             <reqmultilinecomment>, <reqsinglelinecomment>, <reqchar>,
             <reqeof>, <requirewhitespace>, <tokenizer>
attributes :
    name="string"
        Name of the element, which is referenced in <reqelement>'s (name)
        field, and <language>'s (firstelement) field. Default is undefined.

-------------------------------------------------------------------------------
tagname     : <repeat>
parent      : <element>, <repeat>, <optional>, <pickone>
children    : <repeat>, <optional>, <pickone>, <reqelement>,
              <reqword>, <reqnewline>, <reqnumber>, <reqliteralstring>,
              <reqmultilinecomment>, <reqsinglelinecomment>, <reqchar>,
              <reqeof>, <requirewhitespace>
description : Make child rules repeat a number of times.
attributes  :
    min="[integer|n]"
        Tokens pass through here must match AT LEAST (integer) times, or the
        rule fails. If (integer) is "0", then the tokens don't have to match
        at all for the rule to succeed. If (integer) is "n", then there is
        no minimum (but there CAN be a maximum, see "max" attribute). Default
        is "0".
    max="[integer|n]"
        Tokens pass through here must match AT MOST (integer) times, or the
        rule fails. If (integer) is "0", then the tokens can NOT match
        at all for the rule to succeed. If (integer) is "n", then there is
        no maximum (but there CAN be a minimum, see "min" attribute). Default
        is "n".

-------------------------------------------------------------------------------
tagname     : <optional>
parent      : <element>, <repeat>, <optional>, <pickone>
children    : <repeat>, <optional>, <pickone>, <reqelement>,
              <reqword>, <reqnewline>, <reqnumber>, <reqliteralstring>,
              <reqmultilinecomment>, <reqsinglelinecomment>, <reqchar>,
              <reqeof>, <requirewhitespace>
description : Make child rules optional. This is equivalent to
              specifying <repeat min="0" max="1">
attributes  : [no attributes]

-------------------------------------------------------------------------------
tagname     : <pickone>
parent      : <element>, <repeat>, <optional>, <pickone>
children    : <repeat>, <optional>, <pickone>, <reqelement>,
              <reqword>, <reqnewline>, <reqnumber>, <reqliteralstring>,
              <reqmultilinecomment>, <reqsinglelinecomment>, <reqchar>,
              <reqeof>, <requirewhitespace>
description : Any one of this element's children must pass for tokens to be
              acceptable.
attributes  : [no attributes]

-------------------------------------------------------------------------------
tagname     : <reqelement>
parent      : <element>, <repeat>, <optional>, <pickone>
children    : [no children allowed]
description : The current tokens must match the specified element's rules.
attributes  :
    name="string"
        (string) is the element named in an <element> tag's name attribute.
        Beware of the searching rules here: the element specified must either
        be an IMMEDIATE child of the current element, or it must be an
        IMMEDIATE child of the <language> tag. This rule is imposed for
        efficiency purposes. Default is undefined.

-------------------------------------------------------------------------------
tagname     : <reqword>
parent      : <element>, <repeat>, <optional>, <pickone>
children    : [no children allowed]
description : The current token must match the specified word.
attributes  :
    lookup="[true|false]"
        If (true), then (text) refers to a symbol in the binary and not a
        literal string to match. This is mostly for i18n purposes. The symbol
        will be dynamically loaded, and the string referenced by said symbol
        will be used for the comparison. Default is false.
    text="string"
        (string) is the text that the token must match. The comparison is
        either case sensitive or insensitive based on the value of the
        <tokenizer> tag's "casesensitive" attribute. If this tag's "lookup"
        attribute is "true", then this text is not literal, but rather the
        symbol that should be dynamically loaded in the binary to find the
        real string to compare. Default is undefined.

-------------------------------------------------------------------------------
tagname     : <reqwordchars>
parent      : <element>, <repeat>, <optional>, <pickone>
children    : <reqchar>, <repeat>, <optional>, <pickone>
description : The current token must be a word and match the characters
              specified by its <reqchar> children.
attributes  : [no attributes]

-------------------------------------------------------------------------------
tagname     : <reqnewline>
parent      : <element>, <repeat>, <optional>, <pickone>
children    : [no children allowed]
description : The current token must be either "\r", "\r\n", or "\n".
              Note that this test will always fail if the <tokenizer> tag's
              "ignorenewlines" attribute is set to "true", or you've listed
              those characters in the <tokenizer> tag's "whitespacechars"
              attribute.
attributes  : [no attributes]

-------------------------------------------------------------------------------
tagname     : <reqnumber>
parent      : <element>, <repeat>, <optional>, <pickone>
children    : [no children allowed]
description : The current token must be a number. Note that this test will
              always fail if the <tokenizer> tag's "convertnumstowords"
              attribute is set to "true", in which case you can either use
              <reqword> to test numeric tokens, or roll your own <element>
              that checks for numeric characters with <reqchar>.
attributes  :
    integer="[true|false]"
        If (true), the token must be a whole number. The test fails if there's
        a decimal point in the number, even if the number is "1.00", which
        would be whole. Default is false.

-------------------------------------------------------------------------------
tagname     : <reqliteralstring>
parent      : <element>, <repeat>, <optional>, <pickone>
children    : [no children allowed]
description : The current token must be a literal string. Note that this test
              is dependent on the <tokenizer> tag's "quotechars" attribute.
attributes  : [no attributes]

-------------------------------------------------------------------------------
tagname     : <reqsinglelinecomment>
parent      : <element>, <repeat>, <optional>, <pickone>
children    : [no children allowed]
description : You'd almost certainly never need this, unless you were trying
              to force "good commenting" behaviour in your language. This test
              fails if the current token isn't a single line comment. Note
              that this test is dependent on the <tokenizer> tag's
              "singlelinecommentstart" attribute, and always fails unless
              <tokenizer ignoresinglelinecomments="false">
attributes  : [no attributes]

-------------------------------------------------------------------------------
tagname     : <reqmultilinecomment>
parent      : <element>, <repeat>, <optional>, <pickone>
children    : [no children allowed]
description : You'd almost certainly never need this, unless you were trying
              to force "good commenting" behaviour in your language. This test
              fails if the current token isn't a multiline comment. Note
              that this test is dependent on the <tokenizer> tag's
              "singlelinecommentstart" attribute, and always fails unless
              <tokenizer ignoremultilinecomments="false">
attributes  : [no attributes]

-------------------------------------------------------------------------------
tagname     : <reqchar>
parent      : <reqwordchars>
children    : [no children allowed]
description : The current CHARACTER (which is part of a token) must match the
              specified attributes. If you have three <reqchar> rules in a
              row, then the first three chars of the current token are used.
attributes  :
    type="[alphanumeric|letter|number|specific|list|range|end]"
        If (alphanumeric), then the current char must match either an
        alphabetic letter or number in the current locale. If (letter), then
        the current char must be an alphabetic letter in the current locale.
        If (number), then the current char must be a number in the current
        locale. If (specific), then the current char must match the value of
        the "char" attribute. If (list), then the character must be one of the
        chars listed in the value of the "list" attribute. If (range), then
        the current char must match a character in the range defined by the
        "min" and "max" attributes. If "end" then the token must have no more
        chars to examine at that point. Default is alphanumeric.
    char="char"
        If type="specific", then the current char must match (char). Default
        is undefined.
    list="listofchars"
        If type="list", then the current char must match one of the characters
        specified (listofchars). Default is undefined.
    min="char"
        If type="range", the the current char must be >= (char). Default is
        undefined.
    max="char"
        If type="range", the the current char must be <= (char). Default is
        undefined.

-------------------------------------------------------------------------------
tagname     : <reqwhitespace>
parent      : <element>, <repeat>, <optional>, <pickone>
children    : [no children allowed]
description : This test fails if the current token isn't whitespace. Note that
              this test is dependent on the <tokenizer> tag's "whitespacechars"
              attribute, and always fails unless <tokenizer
              ignorewhitespace="false">. Also note that you don't have to
              check for whitespace that separates tokens. Even if you ignore
              whitespace, "token1   token2" will come back as two separate
              word tokens, you just won't be told specifically about the
              whitespace between them.
attributes  : [no attributes]

-------------------------------------------------------------------------------
tagname     : <reqeof>
parent      : <element>, <repeat>, <optional>, <pickone>
children    : [no children allowed]
description : This test fails if the current token isn't the end-of-file
              notifier.
attributes  : [no attributes]

-------------------------------------------------------------------------------
// end of langdefs_tags.txt ...

